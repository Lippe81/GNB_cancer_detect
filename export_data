#include <stdio.h>
#include <stdlib.h>
#include <zip.h>

void read_zip_file(const char *zip_filename) {
    int err = 0;
    struct zip *archive = zip_open(zip_filename, 0, &err);
    if (archive == NULL) {
        fprintf(stderr, "Failed to open zip file: %s\n", zip_filename);
        return;
    }

    zip_int64_t num_entries = zip_get_num_entries(archive, 0);
    for (zip_int64_t i = 0; i < num_entries; i++) {
        struct zip_stat st;
        zip_stat_index(archive, i, 0, &st);

        struct zip_file *zf = zip_fopen_index(archive, i, 0);
        if (!zf) {
            fprintf(stderr, "Failed to open file in zip: %s\n", st.name);
            continue;
        }

        char *contents = malloc(st.size + 1);
        if (contents == NULL) {
            fprintf(stderr, "Failed to allocate memory for file contents\n");
            zip_fclose(zf);
            continue;
        }

        zip_fread(zf, contents, st.size);
        contents[st.size] = '\0';

        printf("File: %s\n", st.name);
        printf("Contents:\n%s\n", contents);

        free(contents);
        zip_fclose(zf);
    }

    zip_close(archive);
}

int main() {
    const char *zip_filename = "archive.zip";
    read_zip_file(zip_filename);
    return 0;
}